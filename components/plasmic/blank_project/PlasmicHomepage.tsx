// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: srLNpwS495U56VP6wX97Sc
// Component: HtgHzpTQFaZ7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Avatar from "../../Avatar"; // plasmic-import: Nyf0fcpCBO/component
import Select from "../../Select"; // plasmic-import: CbeSuJTES8a/component
import TextInput from "../../TextInput"; // plasmic-import: D5uMvH3-wZG/component
import Switch from "../../Switch"; // plasmic-import: LfL2mcCf-Co/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: srLNpwS495U56VP6wX97Sc/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HtgHzpTQFaZ7/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: EXEsZQ8P89p/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: OfZnG_-Zhi2/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  select?: p.Flex<typeof Select>;
  select2?: p.Flex<typeof Select>;
  src?: p.Flex<typeof TextInput>;
  _switch?: p.Flex<typeof Switch>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => "blue" as const
          : undefined
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => "default" as const
          : undefined
      },
      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined
      },
      {
        path: "src.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) =>
              "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg" as const
          : undefined
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Try adjusting the size of the avatar:"}
            </h1>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kWhil)}
              >
                <Avatar
                  data-plasmic-name={"avatar"}
                  data-plasmic-override={overrides.avatar}
                  border={$state._switch.isChecked}
                  className={classNames("__wab_instance", sty.avatar)}
                  image={(() => {
                    try {
                      return $state.src.value;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg";
                      }
                      throw e;
                    }
                  })()}
                  size={$state.select2.value}
                />

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vIvig)}
                  >
                    <Select
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "select",

                          "value"
                        ])(eventArgs[0]);
                      }}
                      options={[
                        { value: "blue", label: "Blue" },
                        { value: "red", label: "Red" }
                      ]}
                      value={p.generateStateValueProp($state, [
                        "select",

                        "value"
                      ])}
                    />

                    <Select
                      data-plasmic-name={"select2"}
                      data-plasmic-override={overrides.select2}
                      className={classNames("__wab_instance", sty.select2)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "select2",

                          "value"
                        ])(eventArgs[0]);
                      }}
                      options={[
                        { value: "default", label: "Default" },
                        { value: "small", label: "Small" }
                      ]}
                      value={p.generateStateValueProp($state, [
                        "select2",

                        "value"
                      ])}
                    />

                    <TextInput
                      data-plasmic-name={"src"}
                      data-plasmic-override={overrides.src}
                      className={classNames("__wab_instance", sty.src)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, ["src", "value"])(
                          (e => e.target?.value).apply(null, eventArgs)
                        );
                      }}
                      placeholder={"image src" as const}
                      value={p.generateStateValueProp($state, ["src", "value"])}
                    />

                    <Switch
                      data-plasmic-name={"_switch"}
                      data-plasmic-override={overrides._switch}
                      className={classNames("__wab_instance", sty._switch)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "_switch",

                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "_switch",

                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {"show border"}
                    </Switch>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "text",
    "avatar",
    "select",
    "select2",
    "src",
    "_switch"
  ],
  section: [
    "section",
    "h1",
    "text",
    "avatar",
    "select",
    "select2",
    "src",
    "_switch"
  ],
  h1: ["h1"],
  text: ["text"],
  avatar: ["avatar"],
  select: ["select"],
  select2: ["select2"],
  src: ["src"],
  _switch: ["_switch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  text: "div";
  avatar: typeof Avatar;
  select: typeof Select;
  select2: typeof Select;
  src: typeof TextInput;
  _switch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    avatar: makeNodeComponent("avatar"),
    select: makeNodeComponent("select"),
    select2: makeNodeComponent("select2"),
    src: makeNodeComponent("src"),
    _switch: makeNodeComponent("_switch"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
