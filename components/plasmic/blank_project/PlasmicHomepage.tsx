// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: srLNpwS495U56VP6wX97Sc
// Component: HtgHzpTQFaZ7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Selectable from "../../Selectable"; // plasmic-import: fmmM3UFhDh/component
import Avatar from "../../Avatar"; // plasmic-import: Nyf0fcpCBO/component
import Field from "../../Field"; // plasmic-import: wzacTm_Aql/component
import Switch from "../../Switch"; // plasmic-import: LfL2mcCf-Co/component
import Select from "../../Select"; // plasmic-import: CbeSuJTES8a/component
import TextInput from "../../TextInput"; // plasmic-import: D5uMvH3-wZG/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: srLNpwS495U56VP6wX97Sc/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HtgHzpTQFaZ7/css

import SvgIcon from "../usertest/icons/PlasmicIcon__Svg"; // plasmic-import: ImslAYRPk/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: EXEsZQ8P89p/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: OfZnG_-Zhi2/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  selectable?: p.Flex<typeof Selectable>;
  avatar?: p.Flex<typeof Avatar>;
  title?: p.Flex<"div">;
  close?: p.Flex<"div">;
  titleText?: p.Flex<"div">;
  close2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  showBadge?: p.Flex<typeof Switch>;
  pos?: p.Flex<typeof Select>;
  size?: p.Flex<typeof Select>;
  src?: p.Flex<typeof TextInput>;
  _switch?: p.Flex<typeof Switch>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "size.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => "default" as const
          : undefined
      },

      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined
      },

      {
        path: "src.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) =>
              "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg" as const
          : undefined
      },

      {
        path: "pos.value",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => "blue" as const
          : undefined
      },

      {
        path: "showBadge.isChecked",
        type: "private",
        variableType: "text",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => undefined
          : undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Try adjusting the size of the avatar:"}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o1RYi
              )}
            >
              {(() => {
                try {
                  return undefined;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            </div>
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kWhil)}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mJxFt)}
                  >
                    <Selectable
                      data-plasmic-name={"selectable"}
                      data-plasmic-override={overrides.selectable}
                      className={classNames("__wab_instance", sty.selectable)}
                      selectable={
                        <Avatar
                          data-plasmic-name={"avatar"}
                          data-plasmic-override={overrides.avatar}
                          badge={$state.showBadge.isChecked}
                          border={$state._switch.isChecked}
                          className={classNames("__wab_instance", sty.avatar)}
                          image={(() => {
                            try {
                              return $state.src.value;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg";
                              }
                              throw e;
                            }
                          })()}
                          position={
                            $state.showBadge.isChecked === true
                              ? $state.pos.value
                              : null
                          }
                          size={$state.size.value}
                        />
                      }
                    />
                  </div>
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qjsis)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__jMk3)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"title"}
                        data-plasmic-override={overrides.title}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.title)}
                      >
                        <div
                          data-plasmic-name={"close"}
                          data-plasmic-override={overrides.close}
                          className={classNames(projectcss.all, sty.close)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__an96O
                            )}
                          >
                            {"ðŸŒˆ"}
                          </div>
                        </div>
                        <div
                          data-plasmic-name={"titleText"}
                          data-plasmic-override={overrides.titleText}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.titleText
                          )}
                        >
                          {"Tokens POC"}
                        </div>
                        <div
                          data-plasmic-name={"close2"}
                          data-plasmic-override={overrides.close2}
                          className={classNames(projectcss.all, sty.close2)}
                        >
                          <SvgIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(projectcss.all, sty.svg)}
                            role={"img"}
                          />
                        </div>
                      </p.Stack>
                    </div>
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vIvig
                        )}
                      >
                        {true ? (
                          <Field
                            className={classNames(
                              "__wab_instance",
                              sty.field__nvXv0
                            )}
                            select={
                              <Switch
                                data-plasmic-name={"showBadge"}
                                data-plasmic-override={overrides.showBadge}
                                children={null}
                                className={classNames(
                                  "__wab_instance",
                                  sty.showBadge
                                )}
                                isChecked={
                                  p.generateStateValueProp($state, [
                                    "showBadge",
                                    "isChecked"
                                  ]) ?? false
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "showBadge",
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }}
                              />
                            }
                          >
                            {"Show Badge"}
                          </Field>
                        ) : null}
                        {(() => {
                          try {
                            return $state.showBadge.isChecked;
                          } catch (e) {
                            if (e instanceof TypeError) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Field
                            className={classNames(
                              "__wab_instance",
                              sty.field__vtYfL
                            )}
                            select={
                              <Select
                                data-plasmic-name={"pos"}
                                data-plasmic-override={overrides.pos}
                                className={classNames(
                                  "__wab_instance",
                                  sty.pos
                                )}
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "pos",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                options={[
                                  { value: "topRight", label: "Top Right" },
                                  {
                                    value: "bottomRight",
                                    label: "Bottom Right"
                                  }
                                ]}
                                value={p.generateStateValueProp($state, [
                                  "pos",
                                  "value"
                                ])}
                              />
                            }
                          >
                            {"Badge position"}
                          </Field>
                        ) : null}
                        {true ? (
                          <Field
                            className={classNames(
                              "__wab_instance",
                              sty.field__f8Jn
                            )}
                            select={
                              <Select
                                data-plasmic-name={"size"}
                                data-plasmic-override={overrides.size}
                                className={classNames(
                                  "__wab_instance",
                                  sty.size
                                )}
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "size",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                options={[
                                  { value: "default", label: "Default" },
                                  { value: "small", label: "Small" }
                                ]}
                                value={p.generateStateValueProp($state, [
                                  "size",
                                  "value"
                                ])}
                              />
                            }
                          >
                            {"Size"}
                          </Field>
                        ) : null}
                        {true ? (
                          <Field
                            className={classNames(
                              "__wab_instance",
                              sty.field__viEPu
                            )}
                            select={
                              <TextInput
                                data-plasmic-name={"src"}
                                data-plasmic-override={overrides.src}
                                className={classNames(
                                  "__wab_instance",
                                  sty.src
                                )}
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "src",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }}
                                placeholder={"image src" as const}
                                value={p.generateStateValueProp($state, [
                                  "src",
                                  "value"
                                ])}
                              />
                            }
                          >
                            {"Src"}
                          </Field>
                        ) : null}
                        {true ? (
                          <Field
                            className={classNames(
                              "__wab_instance",
                              sty.field__zaXw9
                            )}
                            select={
                              <Switch
                                data-plasmic-name={"_switch"}
                                data-plasmic-override={overrides._switch}
                                children={null}
                                className={classNames(
                                  "__wab_instance",
                                  sty._switch
                                )}
                                isChecked={
                                  p.generateStateValueProp($state, [
                                    "_switch",
                                    "isChecked"
                                  ]) ?? false
                                }
                                onChange={(...eventArgs) => {
                                  p.generateStateOnChangeProp($state, [
                                    "_switch",
                                    "isChecked"
                                  ])(eventArgs[0]);
                                }}
                              />
                            }
                          >
                            {"Focus ring"}
                          </Field>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "selectable",
    "avatar",
    "title",
    "close",
    "titleText",
    "close2",
    "svg",
    "showBadge",
    "pos",
    "size",
    "src",
    "_switch"
  ],
  section: [
    "section",
    "h1",
    "selectable",
    "avatar",
    "title",
    "close",
    "titleText",
    "close2",
    "svg",
    "showBadge",
    "pos",
    "size",
    "src",
    "_switch"
  ],
  h1: ["h1"],
  selectable: ["selectable", "avatar"],
  avatar: ["avatar"],
  title: ["title", "close", "titleText", "close2", "svg"],
  close: ["close"],
  titleText: ["titleText"],
  close2: ["close2", "svg"],
  svg: ["svg"],
  showBadge: ["showBadge"],
  pos: ["pos"],
  size: ["size"],
  src: ["src"],
  _switch: ["_switch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  selectable: typeof Selectable;
  avatar: typeof Avatar;
  title: "div";
  close: "div";
  titleText: "div";
  close2: "div";
  svg: "svg";
  showBadge: typeof Switch;
  pos: typeof Select;
  size: typeof Select;
  src: typeof TextInput;
  _switch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    selectable: makeNodeComponent("selectable"),
    avatar: makeNodeComponent("avatar"),
    title: makeNodeComponent("title"),
    close: makeNodeComponent("close"),
    titleText: makeNodeComponent("titleText"),
    close2: makeNodeComponent("close2"),
    svg: makeNodeComponent("svg"),
    showBadge: makeNodeComponent("showBadge"),
    pos: makeNodeComponent("pos"),
    size: makeNodeComponent("size"),
    src: makeNodeComponent("src"),
    _switch: makeNodeComponent("_switch"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
