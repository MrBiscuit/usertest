// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: srLNpwS495U56VP6wX97Sc
// Component: fmmM3UFhDh

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: srLNpwS495U56VP6wX97Sc/projectcss
import sty from "./PlasmicSelectable.module.css"; // plasmic-import: fmmM3UFhDh/css

export type PlasmicSelectable__VariantMembers = {
  selected: "selected";
};

export type PlasmicSelectable__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};

type VariantPropType = keyof PlasmicSelectable__VariantsArgs;
export const PlasmicSelectable__VariantProps = new Array<VariantPropType>(
  "selected"
);

export type PlasmicSelectable__ArgsType = {
  selectable?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSelectable__ArgsType;
export const PlasmicSelectable__ArgProps = new Array<ArgPropType>("selectable");

export type PlasmicSelectable__OverridesType = {
  selectable?: p.Flex<"div">;
};

export interface DefaultSelectableProps {
  selectable?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSelectable__RenderFunc(props: {
  variants: PlasmicSelectable__VariantsArgs;
  args: PlasmicSelectable__ArgsType;
  overrides: PlasmicSelectable__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <div
      data-plasmic-name={"selectable"}
      data-plasmic-override={overrides.selectable}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.selectable,
        { [sty.selectableselected]: hasVariant($state, "selected", "selected") }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["setSelected"] = true
          ? (() => {
              const actionArgs = {
                vgroup: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "updateVariant",
                    interactionUuid: "nUwcibi9F",
                    componentUuid: "fmmM3UFhDh",
                    argName: "vgroup"
                  },
                  () => "selected"
                ),
                operation: __wrapUserFunction(
                  {
                    type: "InteractionArgLoc",
                    actionName: "updateVariant",
                    interactionUuid: "nUwcibi9F",
                    componentUuid: "fmmM3UFhDh",
                    argName: "operation"
                  },
                  () => 4
                )
              };
              return __wrapUserFunction(
                {
                  type: "InteractionLoc",
                  actionName: "updateVariant",
                  interactionUuid: "nUwcibi9F",
                  componentUuid: "fmmM3UFhDh"
                },
                () =>
                  (({ vgroup, value }) => {
                    p.set($state, vgroup, true);
                    return true;
                  })?.apply(null, [actionArgs]),
                actionArgs
              );
            })()
          : undefined;
        if (
          typeof $steps["setSelected"] === "object" &&
          typeof $steps["setSelected"].then === "function"
        ) {
          $steps["setSelected"] = await __wrapUserPromise(
            {
              type: "InteractionLoc",
              actionName: "updateVariant",
              interactionUuid: "nUwcibi9F",
              componentUuid: "fmmM3UFhDh"
            },
            $steps["setSelected"]
          );
        }
      }}
    >
      {p.renderPlasmicSlot({
        defaultContents: null,
        value: args.selectable
      })}

      {(hasVariant($state, "selected", "selected") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__gwKj8, {
            [sty.freeBoxselected__gwKj8JZ8G]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
      {(hasVariant($state, "selected", "selected") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__cwYq1, {
            [sty.freeBoxselected__cwYq1JZ8G]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
      {(hasVariant($state, "selected", "selected") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___9Hxsp, {
            [sty.freeBoxselected___9HxsPjZ8G]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
      {(hasVariant($state, "selected", "selected") ? true : false) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox___6XrtB, {
            [sty.freeBoxselected___6XrtBjZ8G]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  selectable: ["selectable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  selectable: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectable__VariantsArgs;
    args?: PlasmicSelectable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSelectable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSelectable__ArgProps,
          internalVariantPropNames: PlasmicSelectable__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSelectable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "selectable") {
    func.displayName = "PlasmicSelectable";
  } else {
    func.displayName = `PlasmicSelectable.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectable = Object.assign(
  // Top-level PlasmicSelectable renders the root element
  makeNodeComponent("selectable"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSelectable
    internalVariantProps: PlasmicSelectable__VariantProps,
    internalArgProps: PlasmicSelectable__ArgProps
  }
);

export default PlasmicSelectable;
/* prettier-ignore-end */
