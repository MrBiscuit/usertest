// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: srLNpwS495U56VP6wX97Sc
// Component: RodQ_KOiniY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Selectable from "../../Selectable"; // plasmic-import: fmmM3UFhDh/component
import Avatar from "../../Avatar"; // plasmic-import: Nyf0fcpCBO/component
import Field from "../../Field"; // plasmic-import: wzacTm_Aql/component
import Select from "../../Select"; // plasmic-import: CbeSuJTES8a/component
import Switch from "../../Switch"; // plasmic-import: LfL2mcCf-Co/component
import TextInput from "../../TextInput"; // plasmic-import: D5uMvH3-wZG/component
import Button from "../../Button"; // plasmic-import: 206AypIGIrX/component
import { Timer } from "../../../pages/plasmic-host"; // plasmic-import: rdTmyprFqd/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: srLNpwS495U56VP6wX97Sc/projectcss
import sty from "./PlasmicTask1.module.css"; // plasmic-import: RodQ_KOiniY/css

import SvgIcon from "./icons/PlasmicIcon__Svg"; // plasmic-import: ImslAYRPk/icon
import SearchsvgIcon from "../blank_project/icons/PlasmicIcon__Searchsvg"; // plasmic-import: EXEsZQ8P89p/icon
import ChecksvgIcon from "../blank_project/icons/PlasmicIcon__Checksvg"; // plasmic-import: OfZnG_-Zhi2/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 37rOcoUtm3E/icon

export type PlasmicTask1__VariantMembers = {};

export type PlasmicTask1__VariantsArgs = {};
type VariantPropType = keyof PlasmicTask1__VariantsArgs;
export const PlasmicTask1__VariantProps = new Array<VariantPropType>();

export type PlasmicTask1__ArgsType = {
  correctAnswer?: any;
  onCorrectAnswerChange?: (val: any) => void;
  userId?: string;
  onUserIdChange?: (val: string) => void;
};

type ArgPropType = keyof PlasmicTask1__ArgsType;
export const PlasmicTask1__ArgProps = new Array<ArgPropType>(
  "correctAnswer",
  "onCorrectAnswerChange",
  "userId",
  "onUserIdChange"
);

export type PlasmicTask1__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  selectable?: p.Flex<typeof Selectable>;
  avatar?: p.Flex<typeof Avatar>;
  title?: p.Flex<"div">;
  close?: p.Flex<"div">;
  titleText?: p.Flex<"div">;
  close2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  size?: p.Flex<typeof Select>;
  showBadge?: p.Flex<typeof Switch>;
  pos?: p.Flex<typeof Select>;
  src?: p.Flex<typeof TextInput>;
  _switch?: p.Flex<typeof Switch>;
  button?: p.Flex<typeof Button>;
  timer?: p.Flex<typeof Timer>;
};

export interface DefaultTask1Props {
  correctAnswer?: any;
  onCorrectAnswerChange?: (val: any) => void;
  userId?: string;
  onUserIdChange?: (val: string) => void;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTask1__RenderFunc(props: {
  variants: PlasmicTask1__VariantsArgs;
  args: PlasmicTask1__ArgsType;
  overrides: PlasmicTask1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "size.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "default" as const
      },

      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },

      {
        path: "src.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg" as const
      },

      {
        path: "pos.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "blue" as const
      },

      {
        path: "showBadge.isChecked",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },

      {
        path: "result",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },

      {
        path: "correctAnswer",
        type: "writable",
        variableType: "object",

        valueProp: "correctAnswer",
        onChangeProp: "onCorrectAnswerChange"
      },
      {
        path: "userId",
        type: "writable",
        variableType: "text",

        valueProp: "userId",
        onChangeProp: "onUserIdChange"
      },
      {
        path: "timer.elapsedTime",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate } = usePlasmicDataConfig();

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Try adjusting the size of the avatar:"}
        </h1>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wEhYp
          )}
        >
          {(() => {
            try {
              return undefined;
            } catch (e) {
              if (e instanceof TypeError) {
                return undefined;
              }
              throw e;
            }
          })()}
        </div>
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__n1ME)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__wIgy8)}>
                <Selectable
                  data-plasmic-name={"selectable"}
                  data-plasmic-override={overrides.selectable}
                  className={classNames("__wab_instance", sty.selectable)}
                  selectable={
                    <Avatar
                      data-plasmic-name={"avatar"}
                      data-plasmic-override={overrides.avatar}
                      badge={$state.result.showBadge}
                      border={$state.result.focusRing}
                      className={classNames("__wab_instance", sty.avatar)}
                      image={
                        "https://pyxis.nymag.com/v1/imgs/f85/54d/9494425816f9436f1366315cd8a955ca9e-avatar.1x.rsquare.w1400.jpg" as const
                      }
                      position={$state.result.position}
                      size={$state.result.size}
                    />
                  }
                />
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__mZi5J)}>
                <div className={classNames(projectcss.all, sty.freeBox__fz5N5)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.title)}
                  >
                    <div
                      data-plasmic-name={"close"}
                      data-plasmic-override={overrides.close}
                      className={classNames(projectcss.all, sty.close)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n1IVr
                        )}
                      >
                        {"🌈"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"titleText"}
                      data-plasmic-override={overrides.titleText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.titleText
                      )}
                    >
                      {"Tokens POC"}
                    </div>
                    <div
                      data-plasmic-name={"close2"}
                      data-plasmic-override={overrides.close2}
                      className={classNames(projectcss.all, sty.close2)}
                    >
                      <SvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </div>
                  </p.Stack>
                </div>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bmA3A)}
                  >
                    {true ? (
                      <Field
                        className={classNames(
                          "__wab_instance",
                          sty.field__azObi
                        )}
                        select={
                          <Select
                            data-plasmic-name={"size"}
                            data-plasmic-override={overrides.size}
                            className={classNames("__wab_instance", sty.size)}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "size",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};
                                $steps["setResult"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "u9wZUkbwy",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["result"]
                                          })
                                        ),
                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "u9wZUkbwy",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),
                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "u9wZUkbwy",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "value"
                                          },
                                          () => ({
                                            ...$state.result,
                                            size: $state.size.value
                                          })
                                        )
                                      };

                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "u9wZUkbwy",
                                          componentUuid: "RodQ_KOiniY"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            const { objRoot, variablePath } =
                                              variable;

                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["setResult"] === "object" &&
                                  typeof $steps["setResult"].then === "function"
                                ) {
                                  $steps["setResult"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "u9wZUkbwy",
                                      componentUuid: "RodQ_KOiniY"
                                    },
                                    $steps["setResult"]
                                  );
                                }
                              })?.apply(null, eventArgs);
                            }}
                            options={[
                              { value: "small", label: "Small" },
                              { value: "default", label: "Default" },
                              { value: "large", label: "Large" }
                            ]}
                            value={p.generateStateValueProp($state, [
                              "size",
                              "value"
                            ])}
                          />
                        }
                      >
                        {"Size"}
                      </Field>
                    ) : null}
                    {true ? (
                      <Field
                        className={classNames(
                          "__wab_instance",
                          sty.field__tgCjp
                        )}
                        select={
                          <Switch
                            data-plasmic-name={"showBadge"}
                            data-plasmic-override={overrides.showBadge}
                            children={null}
                            className={classNames(
                              "__wab_instance",
                              sty.showBadge
                            )}
                            isChecked={
                              p.generateStateValueProp($state, [
                                "showBadge",
                                "isChecked"
                              ]) ?? false
                            }
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "showBadge",
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);
                              (async isChecked => {
                                const $steps = {};
                                $steps["setResult"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "ioB0zlDUS",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["result"]
                                          })
                                        ),
                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "ioB0zlDUS",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),
                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "ioB0zlDUS",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "value"
                                          },
                                          () => ({
                                            ...$state.result,
                                            showBadge:
                                              $state.showBadge.isChecked
                                          })
                                        )
                                      };

                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "ioB0zlDUS",
                                          componentUuid: "RodQ_KOiniY"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            const { objRoot, variablePath } =
                                              variable;

                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["setResult"] === "object" &&
                                  typeof $steps["setResult"].then === "function"
                                ) {
                                  $steps["setResult"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "ioB0zlDUS",
                                      componentUuid: "RodQ_KOiniY"
                                    },
                                    $steps["setResult"]
                                  );
                                }
                              })?.apply(null, eventArgs);
                            }}
                          />
                        }
                      >
                        {"Show Badge"}
                      </Field>
                    ) : null}
                    {(() => {
                      try {
                        return $state.showBadge.isChecked;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Field
                        className={classNames(
                          "__wab_instance",
                          sty.field__okJpm
                        )}
                        select={
                          <Select
                            data-plasmic-name={"pos"}
                            data-plasmic-override={overrides.pos}
                            className={classNames("__wab_instance", sty.pos)}
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "pos",
                                  "value"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);
                              (async value => {
                                const $steps = {};
                                $steps["setResult"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "8DJ_xi0a1",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["result"]
                                          })
                                        ),
                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "8DJ_xi0a1",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),
                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "8DJ_xi0a1",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "value"
                                          },
                                          () => ({
                                            ...$state.result,
                                            position: $state.pos.value
                                          })
                                        )
                                      };

                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "8DJ_xi0a1",
                                          componentUuid: "RodQ_KOiniY"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            const { objRoot, variablePath } =
                                              variable;

                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["setResult"] === "object" &&
                                  typeof $steps["setResult"].then === "function"
                                ) {
                                  $steps["setResult"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "8DJ_xi0a1",
                                      componentUuid: "RodQ_KOiniY"
                                    },
                                    $steps["setResult"]
                                  );
                                }
                              })?.apply(null, eventArgs);
                            }}
                            options={[
                              { value: "topRight", label: "Top Right" },
                              { value: "bottomRight", label: "Bottom Right" }
                            ]}
                            value={p.generateStateValueProp($state, [
                              "pos",
                              "value"
                            ])}
                          />
                        }
                      >
                        {"Badge position"}
                      </Field>
                    ) : null}
                    {true ? (
                      <Field
                        className={classNames(
                          "__wab_instance",
                          sty.field__m5MtG
                        )}
                        select={
                          <TextInput
                            data-plasmic-name={"src"}
                            data-plasmic-override={overrides.src}
                            className={classNames("__wab_instance", sty.src)}
                            onChange={(...eventArgs) => {
                              p.generateStateOnChangeProp($state, [
                                "src",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }}
                            placeholder={"image src" as const}
                            value={p.generateStateValueProp($state, [
                              "src",
                              "value"
                            ])}
                          />
                        }
                      >
                        {"Src"}
                      </Field>
                    ) : null}
                    {true ? (
                      <Field
                        className={classNames(
                          "__wab_instance",
                          sty.field__h1CaH
                        )}
                        select={
                          <Switch
                            data-plasmic-name={"_switch"}
                            data-plasmic-override={overrides._switch}
                            children={null}
                            className={classNames(
                              "__wab_instance",
                              sty._switch
                            )}
                            isChecked={
                              p.generateStateValueProp($state, [
                                "_switch",
                                "isChecked"
                              ]) ?? false
                            }
                            onChange={async (...eventArgs) => {
                              ((...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "_switch",
                                  "isChecked"
                                ])(eventArgs[0]);
                              }).apply(null, eventArgs);
                              (async isChecked => {
                                const $steps = {};
                                $steps["setResult"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vPRvC_GWP",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "variable"
                                          },
                                          () => ({
                                            objRoot: $state,
                                            variablePath: ["result"]
                                          })
                                        ),
                                        operation: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vPRvC_GWP",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "operation"
                                          },
                                          () => 0
                                        ),
                                        value: __wrapUserFunction(
                                          {
                                            type: "InteractionArgLoc",
                                            actionName: "updateVariable",
                                            interactionUuid: "vPRvC_GWP",
                                            componentUuid: "RodQ_KOiniY",
                                            argName: "value"
                                          },
                                          () => ({
                                            ...$state.result,
                                            focusRing: $state._switch.isChecked
                                          })
                                        )
                                      };

                                      return __wrapUserFunction(
                                        {
                                          type: "InteractionLoc",
                                          actionName: "updateVariable",
                                          interactionUuid: "vPRvC_GWP",
                                          componentUuid: "RodQ_KOiniY"
                                        },
                                        () =>
                                          (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            const { objRoot, variablePath } =
                                              variable;

                                            p.set(objRoot, variablePath, value);
                                            return value;
                                          })?.apply(null, [actionArgs]),
                                        actionArgs
                                      );
                                    })()
                                  : undefined;
                                if (
                                  typeof $steps["setResult"] === "object" &&
                                  typeof $steps["setResult"].then === "function"
                                ) {
                                  $steps["setResult"] = await __wrapUserPromise(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "updateVariable",
                                      interactionUuid: "vPRvC_GWP",
                                      componentUuid: "RodQ_KOiniY"
                                    },
                                    $steps["setResult"]
                                  );
                                }
                              })?.apply(null, eventArgs);
                            }}
                          />
                        }
                      >
                        {"Focus ring"}
                      </Field>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {true ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t9CDf
            )}
          >
            {(() => {
              try {
                return JSON.stringify($state.result);
              } catch (e) {
                if (e instanceof TypeError) {
                  return "123123";
                }
                throw e;
              }
            })()}
          </div>
        ) : null}
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={"blue" as const}
          onClick={async event => {
            const $steps = {};
            $steps["dataOperation"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: __wrapUserFunction(
                      {
                        type: "InteractionArgLoc",
                        actionName: "dataSourceOp",
                        interactionUuid: "mXzh3d8EeuI",
                        componentUuid: "RodQ_KOiniY",
                        argName: "dataOp"
                      },
                      () => ({
                        sourceId: "b8UAFEnT6Wj5LorB3qg5zQ",
                        opId: "5d58e9a7c1f042e7754f41e514c0c2ddb4e939ea69a57a5748a761b99224574c42dec7c2de19c92295aff463df5767e972775e26b9b5b752b554a5553dcc988ab28f30bf0b0d5241fb4c8e9fef911f399138c08deb9d7cd7018e49b9fefd6e020b878ffcc738051e1de1802d61dcfc52fc0f71ade086f4ff237cfb8eed436f0277cb5643e871eea4e528c282f5d0ad706286d010d4f2af908b026d5067e6438025bf45232961cb804ba527297329bd560c4ad20c07757bb6d4985325694b9eacc0f11db1c56388712c9f975a5206c4aa97c56261659225f68a1da8527cc9d00b44c7626df68f4553ffad98b4bade7febd2ff2db85f9746dcf7fd063dfae14c987f59c01fde12ae375994c5e29b1601e22f7ca206e57acf6ac298ea93db6bb5f5c12dcf8fdf816b1b98dbdf04a878ab7a1d3a29d9f973214740f61ac5e925f29259a9822c444649cd473c0fbf1d288a1a43caefa656761b0768b506f219efe2664fe2663b5b075c8276f7dc101a9b5bcea7b9aef1fadfa60185517a8af5f222f4ab9091c26c85f89a539be3ae883cf031b30179933dd232eb9d33920bd5a9f0857237acdb988ef1815c4e062fd1a3447f1961bd4f2b54abfb70d776559bbd19949fc165f60e477c07641a212a9b1e0d71ff9df1f7a2160161c87fd8413d246f5db4a7aa40e2ef00193a6828deb230ff2f5b74adb7c0028cd83a137755595dcb6261946004f2846cb108dc24e84bc78b9d87e2d01c85057a4a3c3abf61637224c6fc23b1d214a3ab5fd2b06f38fa5dbff87c1eafba029d19aa2b86aafc5053b3f3c5aeb74cb3ae7cc503cf8ee7bebf8dadb384e51e856a56c09ffac655c33ae417027bd0a7f0419851cab3745aadd0a9edbf8540ab715daaacf2cfc7d7ca3e622121b1323202865a9a3276df240fc8b90061c3936f9290be099c31db177418bbb3d33b67d8ebbef0540e1eeffea3c78d9b5aa6595e7f43b7baaec5bae429b5fcf87892d9340c5d2cf088e7b645f3fecfa5ee1a6ca982f7dbbf12c5da0f71ec9512857988f61caa41ad656d9cf5a501d57e508820035be2b581f4d207ddcc0a4df40e8a590020c39e1a448cc4a0aee5ffeaebabb2a81babdcd42ce9472b349af1b6376ff116979b7c356241620cae880735bfbe377578bc56011750268eca881526a9c50260af06df13c64c20e47d23b9b87b376f03a97eed8cd28dcd877015d42d31029e6e444ae0cedd33c923924d7002868c1c490d5f37f240325ef506430d0b459334e40a879e469ef1f1025842b6e955e818943818fe7b3faad37dc31932f2a3ca26",
                        userArgs: {
                          variables: [
                            (() => {
                              try {
                                return (() => {
                                  function objectsAreEqual(obj1, obj2) {
                                    // Get the keys of both objects
                                    const keys1 = Object.keys(obj1);
                                    const keys2 = Object.keys(obj2);

                                    // Check if both objects have the same number of keys
                                    if (keys1.length !== keys2.length) {
                                      return false;
                                    }

                                    // Iterate through the keys of the first object and compare values
                                    for (const key of keys1) {
                                      if (obj1[key] !== obj2[key]) {
                                        return false;
                                      }
                                    }

                                    // If all keys and values are equal, return true
                                    return true;
                                  }

                                  if (Object.keys($state.result).length === 0)
                                    return "failed";
                                  return objectsAreEqual(
                                    $state.result,
                                    $state.correctAnswer
                                  )
                                    ? "success"
                                    : JSON.stringify($state.result);
                                })();
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return null;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.userId;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return null;
                                }
                                throw e;
                              }
                            })(),
                            (() => {
                              try {
                                return $state.timer.elapsedTime;
                              } catch (e) {
                                if (e instanceof TypeError) {
                                  return null;
                                }
                                throw e;
                              }
                            })()
                          ]
                        },

                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"]
                      })
                    )
                  };

                  return __wrapUserFunction(
                    {
                      type: "InteractionLoc",
                      actionName: "dataSourceOp",
                      interactionUuid: "mXzh3d8EeuI",
                      componentUuid: "RodQ_KOiniY"
                    },
                    () =>
                      (async ({ dataOp }) => {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken
                        });
                        if (
                          dataOp.invalidatedKeys.find(
                            key => key === "plasmic_refresh_all"
                          )
                        ) {
                          Array.from(cache.keys()).forEach(key => {
                            mutate(key);
                          });
                          return response;
                        }
                        dataOp.invalidatedKeys?.forEach(invalidateKey =>
                          Array.from(cache.keys()).forEach(key => {
                            if (
                              typeof key === "string" &&
                              key.includes(`.$.${invalidateKey}.$.`)
                            ) {
                              mutate(key);
                            }
                          })
                        );

                        return response;
                      })?.apply(null, [actionArgs]),
                    actionArgs
                  );
                })()
              : undefined;
            if (
              typeof $steps["dataOperation"] === "object" &&
              typeof $steps["dataOperation"].then === "function"
            ) {
              $steps["dataOperation"] = await __wrapUserPromise(
                {
                  type: "InteractionLoc",
                  actionName: "dataSourceOp",
                  interactionUuid: "mXzh3d8EeuI",
                  componentUuid: "RodQ_KOiniY"
                },
                $steps["dataOperation"]
              );
            }
          }}
        >
          {"Submit and Continue ->"}
        </Button>
        <Timer
          data-plasmic-name={"timer"}
          data-plasmic-override={overrides.timer}
          className={classNames("__wab_instance", sty.timer)}
          onTimeChange={p.generateStateOnChangeProp($state, [
            "timer",
            "elapsedTime"
          ])}
        />
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "selectable",
    "avatar",
    "title",
    "close",
    "titleText",
    "close2",
    "svg",
    "size",
    "showBadge",
    "pos",
    "src",
    "_switch",
    "button",
    "timer"
  ],
  h1: ["h1"],
  selectable: ["selectable", "avatar"],
  avatar: ["avatar"],
  title: ["title", "close", "titleText", "close2", "svg"],
  close: ["close"],
  titleText: ["titleText"],
  close2: ["close2", "svg"],
  svg: ["svg"],
  size: ["size"],
  showBadge: ["showBadge"],
  pos: ["pos"],
  src: ["src"],
  _switch: ["_switch"],
  button: ["button"],
  timer: ["timer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  selectable: typeof Selectable;
  avatar: typeof Avatar;
  title: "div";
  close: "div";
  titleText: "div";
  close2: "div";
  svg: "svg";
  size: typeof Select;
  showBadge: typeof Switch;
  pos: typeof Select;
  src: typeof TextInput;
  _switch: typeof Switch;
  button: typeof Button;
  timer: typeof Timer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTask1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTask1__VariantsArgs;
    args?: PlasmicTask1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTask1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTask1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTask1__ArgProps,
          internalVariantPropNames: PlasmicTask1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTask1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTask1";
  } else {
    func.displayName = `PlasmicTask1.${nodeName}`;
  }
  return func;
}

export const PlasmicTask1 = Object.assign(
  // Top-level PlasmicTask1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    selectable: makeNodeComponent("selectable"),
    avatar: makeNodeComponent("avatar"),
    title: makeNodeComponent("title"),
    close: makeNodeComponent("close"),
    titleText: makeNodeComponent("titleText"),
    close2: makeNodeComponent("close2"),
    svg: makeNodeComponent("svg"),
    size: makeNodeComponent("size"),
    showBadge: makeNodeComponent("showBadge"),
    pos: makeNodeComponent("pos"),
    src: makeNodeComponent("src"),
    _switch: makeNodeComponent("_switch"),
    button: makeNodeComponent("button"),
    timer: makeNodeComponent("timer"),

    // Metadata about props expected for PlasmicTask1
    internalVariantProps: PlasmicTask1__VariantProps,
    internalArgProps: PlasmicTask1__ArgProps
  }
);

export default PlasmicTask1;
/* prettier-ignore-end */
